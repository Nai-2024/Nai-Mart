

--- Header Plain


import logo from "../assets/icon/logo.png";
import cart from "../assets/icon/cart.png";

export default function Header() {
  return (
    <header>
      <nav className="navbar">
        <img src={logo} alt="Logo" className="logo" />
        <span className="title">Nai Electronics</span>
        <input type="text" className="search-box" placeholder="Search..." />
        <div className="links">
          <h4>Home</h4>
          <h4>About Us</h4>
          <h4>Contact</h4>
        </div>
        <img src={cart} alt="Cart" className="cart" />
      </nav>
    </header>
  );
}

header {
  width: 100%;
  background-color: rgb(22, 136, 156);
  font-family: "Poppins", sans-serif;
  font-weight: 700;
}

.navbar {
  display: grid;
  grid-template-columns: auto 1fr 3fr auto auto; /* fractions for spacing */
  align-items: center;
  max-width: 1300px;
  margin: 0 auto;
  padding: 5px 20px;
  column-gap: 20px;
}

.logo {
  width: 70px;
  transition: transform 0.3s ease, opacity 0.3s ease;
}
.logo:hover {
  transform: scale(1.1);
  cursor: pointer;
  opacity: 0.8;
}

.title {
  font-size: 1.3rem;
  color: #fff;
}

.search-box {
  width: 100%; /* will fill the 3fr column */
  height: 35px;
  border-radius: 4px;
  border: none;
  padding-left: 10px;
}

.links {
  display: flex;
  gap: 25px;
}

.links h4 {
  color: #fff;
  cursor: pointer;
  transition: transform 0.3s ease;
}
.links h4:hover {
  transform: scale(1.1);
}

.cart {
  width: 35px;
  transition: transform 0.3s ease, opacity 0.3s ease;
}
.cart:hover {
  transform: scale(1.1);
  cursor: pointer;
  opacity: 0.8;
}

/* Responsive */
@media (max-width: 1024px) {
  .navbar {
    grid-template-columns: auto 2fr 2fr auto auto;
  }
}

@media (max-width: 768px) {
  .navbar {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto;
    row-gap: 10px;
  }
  .logo {
    grid-column: 1 / 2;
  }
  .title {
    grid-column: 2 / 3;
    text-align: right;
  }
  .search-box {
    grid-column: 1 / 3;
    width: 100%;
  }
  .links {
    grid-column: 1 / 2;
    justify-content: start;
  }
  .cart {
    grid-column: 2 / 3;
    justify-self: end;
  }
}

------------

footer plain 
export default function Footer() {
  return (
    <footer className="footer">
      <div className="footer-main">
        {/* Quick Links */}
        <div className="footer-links">
          <h3>Quick Links</h3>
          <a href="#">Home</a>
          <a href="#">About Us</a>
          <a href="#">Contact</a>
        </div>

        {/* About Section */}
        <div className="footer-about">
          <h3>Nai Electronics</h3>
          <p>Your trusted online store for electronics, gadgets, and more.</p>
        </div>

        {/* Contact Info */}
        <div className="footer-contact">
          <h3>Contact</h3>
          <p>Email: info@naielectronics.com</p>
          <p>Phone: +1 234 567 890</p>
          <p>Address: 123 Main Street, City</p>
        </div>
      </div>

      <div className="footer-bottom">
        &copy; {new Date().getFullYear()} Nai Electronics. All rights reserved.
      </div>
    </footer>
  );
}



footer using Tailwind css


eexport default function Footer() {
  return (
    <footer className="bg-gray-900 text-gray-300 mt-auto">
      {/* Main Grid */}
    
     
      <div className="container mx-auto pl-6 pr-0 py-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-[1fr_3fr_1fr] gap-5">
        {/* Quick Links */}
        <div className="text-center sm:text-left">
          <h3 className="text-lg font-semibold text-white mb-3">Quick Links</h3>
          <div className="flex flex-col space-y-2">
            <a href="#" className="hover:text-[#16a085] transition-colors">Home</a>
            <a href="#" className="hover:text-[#16a085] transition-colors">About Us</a>
            <a href="#" className="hover:text-[#16a085] transition-colors">Contact</a>
          </div>
        </div>

        {/* About Section */}
        <div className="text-center">
          <h4 className="text-xl font-bold text-white mb-2">Nai Electronics</h4>
          <p className="text-sm whitespace-nowrap">
            Your trusted online store for electronics, gadgets, and more.
          </p>
        </div>

        {/* Contact Info */}
        <div className="text-left justify-self-end">
          <h3 className="text-lg font-semibold text-white mb-3">Contact</h3>
          <p>Email: info@naielectronics.com</p>
          <p>Phone: +1 234 567 890</p>
          <p>Address: 123 Main Street, City</p>
        </div>
      </div>

      {/* Bottom Bar */}
      <div className="bg-gray-800 text-center py-4 text-sm">
        &copy; {new Date().getFullYear()} Nai Electronics. All rights reserved.
      </div>
    </footer>
  );
}


----

Copied on Aug 21- at 8:00pm

import items from "./itemsData";

export default function ItemPage() {
  return (
    <div className="flex flex-col md:flex-row p-6 gap-4">
      {/* Sidebar */}
      <aside className="w-full md:w-1/4 bg-gray-200 p-4 rounded-sm shadow-md ">

        {/* Category filter */}
        <div className="mb-6">
          <h3 className="font-semibold mb-2">Category</h3>
          <ul className="space-y-2">
            <li><a href="#" className="hover:text-[#d67405] cursor-pointer">All</a></li>
            <li><a href="#" className="hover:text-[#d67405] cursor-pointer">Men</a></li>
            <li><a href="#" className="hover:text-[#d67405] cursor-pointer">Women</a></li>
            <li><a href="#" className="hover:text-[#d67405] cursor-pointer">Accessories</a></li>
          </ul>
        </div>

        {/* Price filter */}
        <div className="mb-6">
          <h3 className="font-semibold mb-2">Price</h3>
          <ul className="space-y-2">
            <li><a href="#" className="hover:text-[#d67405]">Under $50</a></li>
            <li><a href="#" className="hover:text-[#d67405]">$50 - $100</a></li>
            <li><a href="#" className="hover:text-[#d67405]">Over $100</a></li>
          </ul>
        </div>

        {/* Gender filter */}
        <div className="mb-5">
          <h3 className="font-semibold">Gender</h3>
          <ul className="space-y-2">
            <li><a href="#" className="hover:text-[#d67405]">Men</a></li>
            <li><a href="#" className="hover:text-[#d67405]">Women</a></li>
            <li><a href="#" className="hover:text-[#d67405]">Unisex</a></li>
          </ul>
        </div>
      </aside>

      {/* Product grid */}
      <main className="w-full md:w-3/4">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {items.map((item, index) => (
            <div
              key={index}
              className="bg-gray-200 text-black rounded-sm shadow-md p-6 flex flex-col items-center text-center hover:shadow-lg transition cursor-pointer"
            >
              <img
                src={item.image}
                alt={item.title}
                className="w-32 h-32 object-cover rounded-lg mb-4"
              />
              <h3 className="text-lg font-semibold">{item.title}</h3>
              <p className="text-black">{item.description}</p>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}

-----
Side bar filer - hard coded

export default function SidebarFilters() {
  return (
    <aside className="w-full md:w-[20%] p-4 rounded-sm mb-4 md:mb-0 border-r border-gray-300">
      {/* Category filter */}
      <div className="mb-6">
        <h3 className="font-semibold mb-2">Category</h3>
        <ul className="space-y-2">
          <li><button className="hover:text-[#d67405] cursor-pointer">All</button></li>
          <li><button className="hover:text-[#d67405] cursor-pointer">Men</button></li>
          <li><button className="hover:text-[#d67405] cursor-pointer">Women</button></li>
          <li><button className="hover:text-[#d67405] cursor-pointer">Accessories</button></li>
        </ul>
      </div>

      {/* Price filter */}
      <div className="mb-6">
        <h3 className="font-semibold mb-2">Price</h3>
        <ul className="space-y-2">
          <li><button className="hover:text-[#d67405]">$0 - $50</button></li>
          <li><button className="hover:text-[#d67405]">$50 - $100</button></li>
          <li><button className="hover:text-[#d67405]">Over $100</button></li>
        </ul>
      </div>

      {/* Gender filter */}
      <div>
        <h3 className="font-semibold mb-2">Gender</h3>
        <ul className="space-y-2">
          <li><button className="hover:text-[#d67405]">Men</button></li>
          <li><button className="hover:text-[#d67405]">Women</button></li>
          <li><button className="hover:text-[#d67405]">Unisex</button></li>
        </ul>
      </div>
    </aside>
  );
}

-----
side bar filder- fetch the products catagory
import { useEffect, useState } from "react";

export default function SidebarFilters({ onCategorySelect }) {
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    fetch("https://fakestoreapi.com/products/categories")
      .then((res) => res.json())
      .then((data) => {
        setCategories(data);
      })
      .catch((err) => console.error("Error fetching categories:", err));
  }, []);

  return (
    <aside className="w-full md:w-[20%] p-4 rounded-sm mb-4 md:mb-0 border-r border-gray-300">
      {/* Category filter */}
      <div className="mb-6">
        <h3 className="font-semibold mb-2">Category</h3>
        <ul className="space-y-2">
          <li>
            <button
              className="hover:text-[#d67405] cursor-pointer"
              onClick={() => onCategorySelect("all")}
            >
              All
            </button>
          </li>
          {categories.map((cat) => (
            <li key={cat}>
              <button
                className="hover:text-[#d67405] cursor-pointer"
                onClick={() => onCategorySelect(cat)}
              >
                {cat}
              </button>
            </li>
          ))}
        </ul>
      </div>

      {/* Price filter (static for now) */}
      <div className="mb-6">
        <h3 className="font-semibold mb-2">Price</h3>
        <ul className="space-y-2">
          <li><button className="hover:text-[#d67405]">$0 - $50</button></li>
          <li><button className="hover:text-[#d67405]">$50 - $100</button></li>
          <li><button className="hover:text-[#d67405]">Over $100</button></li>
        </ul>
      </div>
    </aside>
  );
}


---- Prodcut Card with hover over 



import { useState, useRef } from "react";

export default function ProductCard({ product }) {
  const [hovered, setHovered] = useState(false);
  const cardRef = useRef(null);

  return (
    <div 
      className="relative cursor-pointer"
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
      ref={cardRef}
    >
      {/* Normal card */}
      <div className="bg-gray-200 rounded shadow-md p-4 flex flex-col justify-between">
        <div className="flex justify-center pt-2">
          <img src={product.image} alt={product.title} className="w-32 h-32 object-contain rounded-lg" />
        </div>
        <div className="flex flex-col justify-between mt-2">
          <h3 className="font-semibold text-center line-clamp-1">{product.title}</h3>
          <p className="text-sm mt-2 line-clamp-2">{product.description.slice(0, 80)}...</p>
          <span className="font-bold text-yellow-600 pt-3 text-center">${product.price}</span>
        </div>
      </div>

      {/* Hover overlay */}
      {hovered && (
        <div className="absolute top-0 left-0 w-[100%] bg-gray-200 rounded shadow-2xl p-4 flex flex-col justify-between z-50 transform scale-110 transition-all duration-300">
          <div className="flex justify-center pt-2">
            <img src={product.image} alt={product.title} className="w-32 h-32 object-contain rounded-lg" />
          </div>
          <div className="flex flex-col justify-between mt-2">
            <h3 className="font-semibold text-center">{product.title}</h3>
            <p className="text-sm mt-2">{product.description}</p>
            <span className="font-bold text-yellow-600 pt-3 text-center">${product.price}</span>
          </div>
        </div>
      )}
    </div>
  );
}

ProductCard - Aug 27, 2025

/*
  - This is a component that renders each product.
  - It receives a single product prop.
  - Displays:
    - Product image (img) with object-contain so it doesn’t stretch.
    - Title (clamped to 1 line) and description (clamped to 2 lines).
    - Price and “Add to Cart” button.
  - On click of the button:
    - Saves the product to cart (addToCart).
    - Navigates to product details page using navigate(/product/${product.id}, { state: { product } }).  
*/

import { useNavigate } from "react-router-dom";
import { addToCart } from "./cartUtils";

export default function ProductCard({ product }) {
 const navigate = useNavigate();

  const handleAddToCart = () => {
       addToCart(product);          // Save product to cart
      // alert("Product added to cart!");
        navigate("/cart")
  };

  return (
    <div className="bg-gray-200 rounded shadow-md p-4 flex flex-col justify-between hover:shadow-xl hover:-translate-y-1 transition duration-300 min-h-[310px] cursor-pointer">
      
      {/* Image */}
      <div className="flex justify-center pt-2">
        <img src={product.image} alt={product.title} className="w-32 h-32 object-contain rounded-lg"/>
      </div>

      {/* Content */}
      <div className="flex flex-col justify-between gap-1">
        <h3 className="font-semibold line-clamp-1 text-center">{product.title}</h3>
       {<p className="text-sm mb-2 line-clamp-2">{product.description.slice(0, 80)}...</p>}

        {/* Price + Add to Cart button */}
        <div className="flex items-center justify-between pt-5">
          <button
            className="bg-yellow-500 text-black px-3 rounded-xl hover:bg-yellow-600 transition cursor-pointer"
            onClick={handleAddToCart}
          >
            Add to Cart
          </button>
           <span className="font-bold text-yellow-600">${product.price}</span>
        </div>
      </div>
    </div>
  );
}


--- ProdcutCart Aug-28, 2025
  return (
    <div className="p-4">
      {cartItems.length > 0 ? (
        <div>
          <h2 className="text-xl font-semibold pb-5">Items in Cart</h2>

          <div className="container mx-auto grid grid-cols-1 md:grid-cols-4 gap-2">
            {/* LEFT SIDE - CART ITEMS */}
            <div className="md:col-span-3">
              <div className="flex flex-col gap-2">
                {cartItems.map((item, idx) => (
                  <div
                    key={idx}
                    className="bg-gray-200 p-4 rounded shadow flex flex-col md:flex-row min-h-[220px] h-auto"
                  >
                    {/* Product Image */}
                    <div className="md:w-1/3 flex justify-center items-start mb-4 md:mb-0">
                      <img
                        src={item.image}
                        alt={item.title}
                        className="w-full max-w-[120px] h-auto object-contain rounded-lg"
                      />
                    </div>

                    {/* Product Details */}
                    <div className="md:w-2/3 flex flex-col flex-1 pr-3">
                      <h3 className="text-lg font-semibold">{item.title}</h3>
                      <p className="text-gray-700 text-sm pt-2 flex-grow break-words">
                        {item.description}
                      </p>

                      {/* Add More + Price */}
                      <div className="flex justify-between items-center mt-auto pb-1 gap-2">
                        {/* Add Again Button */}
                        <div className="flex items-center gap-2">
                          {/* Decrease Button */}
                          <button
                            className="w-8 h-8 flex items-center justify-center bg-gray-300 text-black rounded-full hover:bg-gray-400 transition cursor-pointer"
                            onClick={() => decreaseQuantity(item)}
                          >
                            –
                          </button>

                          {/* Quantity Display */}
                          <span className="px-3 py-1 ">
                            {item.quantity || 1}
                          </span>

                          {/* Increase Button */}
                          <button
                            className="w-8 h-8 flex items-center justify-center bg-yellow-500 text-black rounded-full hover:bg-yellow-600 transition cursor-pointer"
                            onClick={() => increaseQuantity(item)}
                          >
                            +
                          </button>
                        </div>

                        {/* Delete Button */}
                        <button
                          className="bg-red-500 text-white px-5 rounded-full hover:bg-red-600 transition cursor-pointer"
                          onClick={() => handleRemoveFromCart(item)}
                        >
                          Delete
                        </button>

                        {/* Price */}
                        <span className="text-yellow-600 font-bold">
                          ${item.price}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* RIGHT SIDE - SUMMARY */}
            <div className="md:col-span-1 bg-gray-200 p-3 rounded shadow h-fit">
              {/* Price Breakdown */}
              <div>
                <div className="flex justify-between text-gray-700 text-sm pt-2">
                  <span>Subtotal</span>
                  <span>${subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-gray-700 text-sm pt-2">
                  <span>HST (13%)</span>
                  <span>${hst.toFixed(2)}</span>
                </div>
                <div className="flex justify-between pb-2 text-gray-700 text-sm pt-2">
                  <span>Shipping & Handling</span>
                  <span>${shipping.toFixed(2)}</span>
                </div>
              </div>

              <hr className="pb-2" />

              {/* Total */}
              <div className="flex justify-between font-bold pb-4">
                <span>Order Total</span>
                <span>${orderTotal.toFixed(2)}</span>
              </div>

              {/* Place Order Button */}
              <button className="w-full bg-yellow-500 text-black p-1 rounded-full font-bold hover:bg-yellow-600 transition cursor-pointer">
                Place Order
              </button>
            </div>
          </div>
        </div>
      ) : (
        <h2 className="text-xl font-semibold">Your cart is empty</h2>
      )}
    </div>
  );

----- Header. 28-08-2025
import { NavLink } from "react-router-dom";
import logo from "../assets/logo.png";
import cart from "../assets/cart.png";
import { useContext } from "react";
import { CartContext } from "./CartContext";

export default function Header() {
  const { cartItems } = useContext(CartContext);
  const totalQuantity = cartItems.reduce((sum, item) => sum + (item.quantity || 1), 0);

  return (
    <header className="w-full font-poppins font-semibold sticky top-0 z-50 shadow-md"
  style={{ backgroundColor: '#1c1c1c' }}
>
      <nav className="w-full flex flex-wrap items-center justify-between px-4 py-3 md:px-6">
        {/* Left Section */}
        <div className="flex items-center gap-3 md:gap-6 flex-shrink-0">
          <NavLink to="/">
            <img
              src={logo}
              alt="Logo"
              className="w-12 h-12 md:w-25 md:h-14 transition-transform duration-300 ease-in-out hover:scale-110 hover:opacity-200 cursor-pointer"
            />
          </NavLink>
          <span className="text-white text-lg md:text-xl">Nai Mart</span>
        </div>

        {/* Right Section */}
        <div className="flex items-center gap-3 md:gap-6 mt-2 md:mt-0">
          <NavLink
            to="/"
            className="text-white cursor-pointer text-sm md:text-base transition-transform duration-300 hover:scale-110"
          >
            Home
          </NavLink>
          <NavLink
            to="/about"
            className="text-white cursor-pointer text-sm md:text-base transition-transform duration-300 hover:scale-110"
          >
            About Us
          </NavLink>
          <NavLink
            to="/contact"
            className="text-white cursor-pointer text-sm md:text-base transition-transform duration-300 hover:scale-110"
          >
            Contact
          </NavLink>

          {/* Cart */}
          <NavLink to="/cart" className="relative">
            <img
              src={cart}
              alt="Cart"
              className="w-8 md:w-9 hover:scale-110 cursor-pointer"
            />
            {totalQuantity > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center">
                {totalQuantity}
              </span>
            )}
          </NavLink>
        </div>
      </nav>
    </header>
  );
}


----    ProductCart()  ----

import { getCart, removeFromCart, addToCart } from "./cartUtils";
import { useEffect } from "react";
import { useContext } from "react";
import { CartContext } from "./CartContext";

export default function ProductCart() {
  const { cartItems, setCartItems } = useContext(CartContext);

  // Load cart from localStorage
  const loadCart = () => {
    const items = getCart();
    setCartItems(items); // update context too
  };

  useEffect(() => {
    loadCart();
  }, []);

  // Remove item
  const handleRemove = (productId) => {
    removeFromCart(productId);
    loadCart(); // updates both localStorage and context
  };

  // Increase quantity
  const increaseQuantity = (product) => {
    addToCart(product);
    loadCart();
  };

  // Decrease quantity
  const decreaseQuantity = (product) => {
    const updatedCart = cartItems.map((item) => {
      if (item.id === product.id) {
        const newQty = Math.max((item.quantity || 1) - 1, 1);
        return { ...item, quantity: newQty };
      }
      return item;
    });
    setCartItems(updatedCart); // update context
    localStorage.setItem("cart", JSON.stringify(updatedCart));
  };


// Calculate subtotal
const subtotal = cartItems.reduce(
  (sum, item) => sum + item.price * (item.quantity || 1),
  0
);

// Calculate shipping
let shipping = 0;

for (const item of cartItems) {
  const quantity = item.quantity || 1;
  const category = (item.category || "").toLowerCase();

  const rate = category.includes("clothing")
    ? 12
    : category.includes("electronics")
    ? 15
    : category.includes("jewel")
    ? 20
    : 10;

  shipping += rate * quantity;
}

// Apply shipping discount
shipping =
  subtotal > 500 ? 0 : subtotal >= 250 ? shipping * 0.5 : shipping;

// Tax Calculations
const hst = subtotal * 0.13;

// Total
const orderTotal = subtotal + hst + shipping;

  return (
    <div className="w-full flex justify-center">
      <div className="w-full max-w-[1500px] p-4">
        {cartItems.length > 0 ? (
          <div>
            <h2 className="text-xl font-semibold pb-5">Items in Cart</h2>

            <div className="container mx-auto grid grid-cols-1 md:grid-cols-4 gap-2">
              {/* LEFT SIDE - CART ITEMS */}
              <div className="md:col-span-3">
                <div className="flex flex-col gap-2">
                  {cartItems.map((item) => (
                    <div
                      key={item.id}
                      className="bg-gray-100 p-4 rounded shadow flex flex-col md:flex-row min-h-[220px]"
                    >
                      {/* Product Image */}
                      <div className="md:w-1/3 flex justify-center items-start mb-4 md:mb-0">
                        <img
                          src={item.image}
                          alt={item.title}
                          className="w-full max-w-[120px] h-auto object-contain rounded-lg"
                        />
                      </div>

                      {/* Product Details */}
                      <div className="md:w-2/3 flex flex-col flex-1 pr-3">
                        <h3 className="text-lg font-semibold">{item.title}</h3>
                        <p className="text-gray-700 text-sm pt-2 flex-grow break-words">
                          {item.description}
                        </p>

                        {/* Quantity + Price */}

                        <div className="flex justify-between items-center pt-5 pb-1 md:mt-auto gap-2">
                          <div className="flex items-center gap-2">
                            <button
                              className="w-8 h-8 flex items-center justify-center bg-gray-300 text-black rounded-full hover:bg-gray-400 transition cursor-pointer"
                              onClick={() => decreaseQuantity(item)}
                            >
                              –
                            </button>

                            <span className="px-3 py-1">
                              {item.quantity || 1}
                            </span>

                            <button
                              className="w-8 h-8 flex items-center justify-center bg-yellow-500 text-black rounded-full hover:bg-yellow-600 transition cursor-pointer"
                              onClick={() => increaseQuantity(item)}
                            >
                              +
                            </button>
                          </div>

                          <button
                            className="bg-red-500 text-white px-5 rounded-full hover:bg-red-600 transition cursor-pointer"
                            onClick={() => handleRemove(item.id)}
                          >
                            Delete
                          </button>

                          <span className="text-yellow-600 font-bold">
                            ${(item.price * (item.quantity || 1)).toFixed(2)}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* RIGHT SIDE - SUMMARY */}
              <div className="md:col-span-1 bg-gray-100 p-3 rounded shadow h-fit">
                <div className="flex justify-between text-gray-700 text-sm pt-2">
                  <span>Subtotal</span>
                  <span>${subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-gray-700 text-sm pt-2">
                  <span>HST (13%)</span>
                  <span>${hst.toFixed(2)}</span>
                </div>
                <div className="flex justify-between pb-2 text-gray-700 text-sm pt-2">
                  <span>Shipping & Handling</span>
                  <span>${shipping.toFixed(2)}</span>
                </div>

                <hr className="pb-2" />

                <div className="flex justify-between font-bold pb-4">
                  <span>Order Total</span>
                  <span>${orderTotal.toFixed(2)}</span>
                </div>

                <button className="w-full bg-yellow-500 text-black p-1 rounded-full font-bold hover:bg-yellow-600 transition cursor-pointer">
                  Place Order
                </button>
              </div>
            </div>
          </div>
        ) : (
          <h2 className="text-xl font-semibold">Your cart is empty</h2>
        )}
      </div>
    </div>
  );
}


----File Structure

src/
 ├─ assets/                  # All static assets (images, icons, logos)
 │   ├─ logo.png              # Website/app logo
 │   ├─ cart.png              # Cart icon
 │   └─ ...other images       # Any other product images or icons
 │
 ├─ components/              # Reusable UI components
 │   ├─ cart/                # All cart-related components
 │   │   ├─ CartContext.jsx   # React context to provide cart state globally
 │   │   ├─ CartItem.jsx      # Displays a single cart item with quantity controls
 │   │   ├─ CartSummary.jsx   # Shows subtotal, tax, shipping, total, and place order button
 │   │   ├─ ProductCart.jsx   # Main cart page, renders CartItem + CartSummary
 │   │   └─ cartUtils.js      # Cart helper functions (add/remove/get items, totals)
 │   │
 │   ├─ Header.jsx            # Top navigation bar with logo, links, cart icon
 │   ├─ Footer.jsx            # Footer with basic info / links
 │   └─ ProductCard.jsx       # UI card for displaying a single product (used in list/grid)
 │
 ├─ pages/                   # Page-level components (mapped to routes)
 │   ├─ Home.jsx             # Main product listing page (previously ProductsPage.jsx)
 │   ├─ About.jsx            # About Us page
 │   ├─ Contact.jsx          # Contact page
 │   ├─ Signup.jsx           # User signup page
 │   ├─ ProductDetails.jsx   # Page showing product details + add to cart button
 │   └─ Checkout.jsx         # Checkout page (billing, shipping info, order summary)
 │
 ├─ features/                # Optional grouping for related feature components
 │   └─ products/            
 │       ├─ ProductsList.jsx   # Renders a grid/list of ProductCard components
 │       └─ SidebarFilters.jsx # Handles category & price filtering UI
 │
 ├─ services/                # Utilities, helper functions, API calls
 │   └─ utilsCart.js          # Cart-related helper functions (can be shared across components)
 │
 └─ App.jsx                  # Main entry point, sets up routes and providers

 