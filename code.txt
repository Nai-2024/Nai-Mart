

----File Structure

src/
 ├─ assets/                  # All static assets (images, icons, logos)
 │   ├─ logo.png              # Website/app logo
 │   ├─ cart.png              # Cart icon
 │   └─ ...other images       # Any other product images or icons
 │
 ├─ components/              # Reusable UI components
 │   ├─ cart/                # All cart-related components
 │   │   ├─ CartContext.jsx   # React context to provide cart state globally
 │   │   ├─ CartItem.jsx      # Displays a single cart item with quantity controls
 │   │   ├─ CartSummary.jsx   # Shows subtotal, tax, shipping, total, and place order button
 │   │   ├─ ProductCart.jsx   # Main cart page, renders CartItem + CartSummary
 │   │   └─ cartUtils.js      # Cart helper functions (add/remove/get items, totals)
 │   │
 │   ├─ Header.jsx            # Top navigation bar with logo, links, cart icon
 │   ├─ Footer.jsx            # Footer with basic info / links
 │   └─ ProductCard.jsx       # UI card for displaying a single product (used in list/grid)
 │
 ├─ pages/                   # Page-level components (mapped to routes)
 │   ├─ Home.jsx             # Main product listing page (previously ProductsPage.jsx)
 │   ├─ About.jsx            # About Us page
 │   ├─ Contact.jsx          # Contact page
 │   ├─ UserAuth.jsx         # User signup and login page
 │   ├─ ProductDetails.jsx   # Page showing product details + add to cart button
 │   └─ Checkout.jsx         # Checkout page (billing, shipping info, order summary)
 │
 ├─ features/                # Optional grouping for related feature components
 │   └─ products/            
 │       ├─ ProductsList.jsx   # Renders a grid/list of ProductCard components
 │       └─ SidebarFilters.jsx # Handles category & price filtering UI
 │
 ├─ services/                # Utilities, helper functions, API calls
 │   └─ utilsCart.js          # Cart-related helper functions (can be shared across components)
 │
 └─ App.jsx                  # Main entry point, sets up routes and providers

 -----



 SHiping form 

 import { useState } from "react";

export default function ShippingForm({ onSubmit }) {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    address: "",
    city: "",
    postalCode: "",
    province: "",
    country: "Canada",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData); // send data back to parent (Checkout)
  };

  return (
    <>
      <h2 className="text-xl font-semibold pb-4">Shipping Address</h2>
      <form onSubmit={handleSubmit} className="flex flex-col gap-3">
        <div className="grid grid-cols-2 gap-4">
          {/* First Name */}
          <div className="flex flex-col">
            <h6 className="mb-1">First Name</h6>
            <input
              type="text"
              name="firstName"
              placeholder="First Name"
              value={formData.firstName}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>

          {/* Last Name */}
          <div className="flex flex-col">
            <h6 className="mb-1">Last Name</h6>
            <input
              type="text"
              name="lastName"
              placeholder="Last Name"
              value={formData.lastName}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>
        </div>
        <div className="grid grid-cols-2 gap-4 pt-3">
          {/* First Name */}
          <div className="flex flex-col">
            <h6>Phone Number</h6>
            <input
              type="tel"
              name="phone"
              placeholder="Phone Number"
              value={formData.phone}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>
          <div className="flex flex-col">
            <h6>Emaill Address</h6>
            <input
              type="email"
              name="email"
              placeholder="Email Address"
              value={formData.email}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>
        </div>
        <div className="grid pt-3 gap-3">
          {/* Address Line 1 */}
          <div className="flex flex-col">
            <h6>Delivery Address</h6>
            <input
              type="text"
              name="address"
              placeholder="Street Address"
              value={formData.address}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded focus:outline-none focus:border-blue-500"
              required
            />
          </div>

          {/* Address Line 2 */}
          <div className="flex flex-col">
            <h6>Delivery Address Line 2 (Optional)</h6>
            <input
              type="text"
              name="address2"
              placeholder="Apartment, suite, etc. (optional)"
              value={formData.address2}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-2  pt-3 ">
          <div className="flex flex-col">
            <h6>City Name</h6>
            <input
              type="text"
              name="city"
              placeholder="City"
              value={formData.city}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>
          <div className="flex flex-col">
            <h6>Postal Code</h6>
            <input
              type="text"
              name="postalCode"
              placeholder="Postal Code"
              value={formData.postalCode}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            />
          </div>
        </div>
        <div className="grid grid-cols-2 gap-3  pt-3 pb-6">
          <div className="flex flex-col">
            <h6>Province / Territory</h6>
            <select
              name="province"
              value={formData.province}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            >
              <option value="">Select Province / Territory</option>
              <option value="AB">Alberta</option>
              <option value="BC">British Columbia</option>
              <option value="MB">Manitoba</option>
              <option value="NB">New Brunswick</option>
              <option value="NL">Newfoundland and Labrador</option>
              <option value="NS">Nova Scotia</option>
              <option value="NT">Northwest Territories</option>
              <option value="NU">Nunavut</option>
              <option value="ON">Ontario</option>
              <option value="PE">Prince Edward Island</option>
              <option value="QC">Quebec</option>
              <option value="SK">Saskatchewan</option>
              <option value="YT">Yukon</option>
            </select>
          </div>
          <div className="flex flex-col">
            <h6>Country</h6>
            <select
              name="country"
              value={formData.country}
              onChange={handleChange}
              className="border border-gray-400 p-2 rounded"
              required
            >
              <option>Select Country</option>
              <option>Canada</option>
              <option>USA</option>
            </select>
          </div>
        </div>

        <button
          type="submit"
          className="bg-blue-600 text-white font-bold py-2 rounded-full hover:bg-blue-700 transition"
        >
          Save Shipping Info
        </button>
      </form>
    </>
  );
}


--- signup form 

import { useState } from "react";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth, db } from "../services/firebaseConfig";
import { doc, setDoc } from "firebase/firestore";
import { validateSignupForm } from "../services/validation";

export default function SignUpForm() {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
  });

  const [errors, setErrors] = useState({});
  const [success, setSuccess] = useState("");
  const [toast, setToast] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setErrors({});
    setSuccess("");

    const validationErrors = validateSignupForm(formData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );

      const uid = userCredential.user.uid;

      await setDoc(doc(db, "users", uid), {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phone: formData.phone,
        createdAt: new Date(),
      });

      // Clear form
      setFormData({
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        password: "",
        confirmPassword: "",
      });

      // Show pop-up message
      setToast("User registered successfully!");
      setTimeout(() => setToast(""), 3000); // hide after 3 seconds

      // Optionally, you can also set success message to display on page
      setSuccess("User registered successfully!");
    } catch (err) {
      setErrors({ general: err.message });
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <div className="w-full max-w-lg p-6 bg-white rounded shadow">
        {toast && (
  <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg animate-slideDown">
    {toast}
  </div>
)}
        <form onSubmit={handleSubmit} className="flex flex-col gap-4">
          {/* Global error */}
          {errors.general && (
            <p className="text-red-600 font-medium">{errors.general}</p>
          )}
          {success && <p className="text-green-600 font-medium">{success}</p>}

          {/* First & Last Name */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div className="flex flex-col">
              <label className="mb-1 font-medium">First Name</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.firstName && (
                <span className="text-red-600">{errors.firstName}</span>
              )}
            </div>

            <div className="flex flex-col">
              <label className="mb-1 font-medium">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.lastName && (
                <span className="text-red-600">{errors.lastName}</span>
              )}
            </div>
          </div>

          {/* Email */}
          <div className="flex flex-col">
            <label className="mb-1 font-medium">Email Address</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.email && (
              <span className="text-red-600">{errors.email}</span>
            )}
          </div>

          {/* Phone */}
          <div className="flex flex-col">
            <label className="mb-1 font-medium">Phone Number (Optional)</label>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.phone && (
              <span className="text-red-600">{errors.phone}</span>
            )}
          </div>

          {/* Password & Confirm Password */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div className="flex flex-col">
              <label className="mb-1 font-medium">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.password && (
                <span className="text-red-600">{errors.password}</span>
              )}
            </div>

            <div className="flex flex-col">
              <label className="mb-1 font-medium">Confirm Password</label>
              <input
                type="password"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleChange}
                className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.confirmPassword && (
                <span className="text-red-600">{errors.confirmPassword}</span>
              )}
            </div>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            className="w-full bg-blue-600 text-white py-2 rounded-full hover:bg-blue-700 transition font-semibold cursor-pointer"
          >
            Sign Up
          </button>
        </form>
      </div>
    </div>
  );
}
-----
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyAtqlW5Zcx3l-3urozLOdDnLKHdvrQ8eZg",
  authDomain: "naimart-d977d.firebaseapp.com",
  projectId: "naimart-d977d",
  storageBucket: "naimart-d977d.firebasestorage.app",
  messagingSenderId: "1039689763442",
  appId: "1:1039689763442:web:5c99752a33dde26ad310eb",
  measurementId: "G-45GESNRFNM"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);



------
Sign up form -Sep 09-
import { useState } from "react";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth, db } from "../services/firebaseConfig";
import { doc, setDoc } from "firebase/firestore";
import { validateSignupForm } from "../services/validation";

export default function SignUpForm() {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
  });

  const [errors, setErrors] = useState({});
  const [toast, setToast] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setErrors({});
    setToast("");

    const validationErrors = validateSignupForm(formData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );

      const uid = userCredential.user.uid;

      // Save user info in Firestore with empty shippingAddress
      await setDoc(doc(db, "users", uid), {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phone: formData.phone,
        shippingAddress: {
          address: "",
          address2: "",
          city: "",
          postalCode: "",
          province: "",
          country: "Canada",
        },
        createdAt: new Date(),
      });

      setToast("User registered successfully!");

      setFormData({
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        password: "",
        confirmPassword: "",
      });

      setTimeout(() => setToast(""), 3000);
    } catch (err) {
      setErrors({ general: err.message });
    }
  };


  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      {/* Toast Notification */}
      {toast && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded shadow-lg animate-slideDown">
          {toast}
        </div>
      )}

      <form
        onSubmit={handleSubmit}
        className="mx-auto w-full max-w-md md:max-w-lg lg:max-w-xl p-6 md:p-8 bg-white rounded-lg shadow-md flex flex-col gap-4"
      >
        {errors.general && (
          <p className="text-red-600 font-medium">{errors.general}</p>
        )}
        <h3 className="text-center font-bold pb-4">Create Your Account</h3>
        {/* First & Last Name */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="flex flex-col">
            <label className="mb-1 font-medium">First Name</label>
            <input
              type="text"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.firstName && (
              <span className="text-red-600">{errors.firstName}</span>
            )}
          </div>

          <div className="flex flex-col">
            <label className="mb-1 font-medium">Last Name</label>
            <input
              type="text"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.lastName && (
              <span className="text-red-600">{errors.lastName}</span>
            )}
          </div>
        </div>

        {/* Email */}
        <div className="flex flex-col">
          <label className="mb-1 font-medium">Email Address</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          {errors.email && <span className="text-red-600">{errors.email}</span>}
        </div>

        {/* Phone */}
        <div className="flex flex-col">
          <label className="mb-1 font-medium">Phone Number (Optional)</label>
          <input
            type="tel"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
            className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          {errors.phone && <span className="text-red-600">{errors.phone}</span>}
        </div>

        {/* Password & Confirm Password */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="flex flex-col">
            <label className="mb-1 font-medium">Password</label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.password && (
              <span className="text-red-600">{errors.password}</span>
            )}
          </div>

          <div className="flex flex-col">
            <label className="mb-1 font-medium">Confirm Password</label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              className="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            {errors.confirmPassword && (
              <span className="text-red-600">{errors.confirmPassword}</span>
            )}
          </div>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded-full hover:bg-blue-700 transition font-semibold cursor-pointer"
        >
          Create Your Account
        </button>
        <hr />
        <div className="flex justify-center items-center gap-6 pt-4 text-sm">
          <p className="text-gray-400">Already have an account?</p>
          <a
            href="/login"
            className="text-blue-600 hover:underline font-medium"
          >
            Login here
          </a>
        </div>
      </form>
    </div>
  );
}

---Shipping form 

import { useState, useEffect } from "react";
import { doc, updateDoc } from "firebase/firestore";
import { db } from "../services/firebaseConfig";

export default function ShippingForm() {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    phone: "",
    email: "",
    address: "",
    address2: "",
    city: "",
    postalCode: "",
    province: "",
    country: "Canada",
  });

  const [toast, setToast] = useState("");
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const savedUser = JSON.parse(localStorage.getItem("currentUser"));
    if (savedUser) {
      setUser(savedUser);

      // Pre-fill with shipping info if available
      if (savedUser.shippingAddress) {
        setFormData(savedUser.shippingAddress);
      }
    }
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!user || !user.uid) {
      setToast("User not logged in!");
      setTimeout(() => setToast(""), 3000);
      return;
    }

    try {
      setLoading(true);

      const userRef = doc(db, "users", user.uid);
      const shippingInfo = { ...formData };

      await updateDoc(userRef, {
        shippingAddress: shippingInfo,
      });

      const updatedUser = {
        ...user,
        shippingAddress: shippingInfo,
      };
      localStorage.setItem("currentUser", JSON.stringify(updatedUser));
      setUser(updatedUser);

      setToast("Shipping info saved successfully!");
      setTimeout(() => setToast(""), 3000);
    } catch (err) {
      console.error("Error saving shipping info:", err);
      setToast("Failed to save shipping info.");
      setTimeout(() => setToast(""), 3000);
    } finally {
      setLoading(false);
    }
  };

  // ✅ If shipping info exists, show summary card
  if (user?.shippingAddress) {
    const sa = user.shippingAddress;
    return (
      <div className="px-2 text-gray-700 bg-gray-100 space-y-2">
        <h2 className="text-xl font-semibold border-b-1 pb-2">
          Shipping Information:
        </h2>

        <div className="flex items-center gap-10 pt-2">
          <span className="font-semibold w-32">Full Name:</span>
          <span>
            {(sa.firstName || user.firstName) +
              " " +
              (sa.lastName || user.lastName)}
          </span>
        </div>

        <div className="flex items-center gap-10 pt-1">
          <span className="font-semibold w-32">Phone:</span>
          <span>{sa.phone || user.phone}</span>
        </div>

        <div className="flex items-center gap-10 pt-1">
          <span className="font-semibold w-32">Email:</span>
          <span>{sa.email || user.email}</span>
        </div>

        <div className="flex items-center gap-10 pt-1">
          <span className="font-semibold w-32">Address:</span>
          <span>
            {sa.address}
            {sa.address2 && `, ${sa.address2}`}, {sa.city}, {sa.province},{" "}
            {sa.postalCode}, {sa.country}
          </span>
        </div>
      </div>
    );
  }

  // Otherwise, show the form
  return (
     <div className="px-2 text-gray-700">
      <h2 className="text-xl font-semibold pb-3">Enter Shipping Information:</h2>
      <form onSubmit={handleSubmit} className="flex flex-col gap-3">
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="firstName"
            value={formData.firstName}
            onChange={handleChange}
            placeholder="First Name"
            required
            className="border p-2 rounded"
          />
          <input
            type="text"
            name="lastName"
            value={formData.lastName}
            onChange={handleChange}
            placeholder="Last Name"
            required
            className="border p-2 rounded"
          />
        </div>
        <input
          type="tel"
          name="phone"
          value={formData.phone}
          onChange={handleChange}
          placeholder="Phone Number"
          required
          className="border p-2 rounded"
        />
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          placeholder="Email Address"
          required
          className="border p-2 rounded"
        />
        <input
          type="text"
          name="address"
          value={formData.address}
          onChange={handleChange}
          placeholder="Street Address"
          required
          className="border p-2 rounded"
        />
        <input
          type="text"
          name="address2"
          value={formData.address2}
          onChange={handleChange}
          placeholder="Apartment / Suite (optional)"
          className="border p-2 rounded"
        />
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="city"
            value={formData.city}
            onChange={handleChange}
            placeholder="City"
            required
            className="border p-2 rounded"
          />
          <input
            type="text"
            name="postalCode"
            value={formData.postalCode}
            onChange={handleChange}
            placeholder="Postal Code"
            required
            className="border p-2 rounded"
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <input
            type="text"
            name="province"
            value={formData.province}
            onChange={handleChange}
            placeholder="Province"
            required
            className="border p-2 rounded"
          />
          <select
            name="country"
            value={formData.country}
            onChange={handleChange}
            required
            className="border p-2 rounded"
          >
            <option value="Canada">Canada</option>
            <option value="USA">USA</option>
          </select>
        </div>
        <button
          type="submit"
          disabled={loading}
          className={`bg-blue-600 text-white font-bold py-2 rounded-full ${
            loading ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-700"
          }`}
        >
          {loading ? "Saving..." : "Save Shipping Info"}
        </button>
      </form>
    </div>
  );
}

